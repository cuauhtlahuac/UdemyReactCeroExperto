{"version":3,"sources":["utils/getGifs.js","components/GifGrid.js","hooks/useGetGifs.js","components/AddCategory.js","GifExpertApp.js","index.js"],"names":["getGifs","category","a","url","process","fetch","resp","json","data","imgs","reduce","acc","id","title","fixed_height","images","link","gif","webp","webp_size","Number","sortImgs","sortBy","GifGridItem","lazy","Loader","className","GifGrid","useState","loading","state","setState","useEffect","then","useGetGifs","map","image","fallback","key","AddCategory","setCategories","setCategoryDictionary","setSameValue","categoryDictionary","inputValue","setInputValue","onSubmit","e","preventDefault","trimmedInputValue","trim","length","catDic","hasOwnProperty","cat","htmlFor","type","value","placeholder","onChange","target","GifExpertApp","categories","sameValue","onClick","ReactDOM","render","document","getElementById"],"mappings":"iPACaA,EAAO,uCAAG,WAAMC,GAAN,yBAAAC,EAAA,6DAChBC,EADgB,iDACgCF,GACrD,UAFqB,6BAESG,oCAFT,SAGHC,MAAMF,GAHH,cAGhBG,EAHgB,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KAEFC,EAAOD,EAAKE,QACjB,SAACC,EAAD,GAKW,IAJTC,EAIQ,EAJRA,GACAC,EAGQ,EAHRA,MACAV,EAEQ,EAFRA,IACUW,EACF,EADRC,OAAUD,aAEX,MAAM,GAAN,mBACIH,GADJ,CAEC,CACCC,KACAC,QACAG,KAAMb,EACNc,IAAKH,EAAaI,KAClBC,UAAWC,OAAON,EAAaK,gBAIlC,IAGKE,EAAWC,IAAOb,EAAM,aA3BR,kBA6BfY,GA7Be,4CAAH,sDCIdE,EAAcC,gBAAK,kBAAM,iCAEzBC,EAAS,kBAAM,yBAAKC,UAAU,WAAf,eAmCNC,EAjCC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,ECLR,SAAAA,GAAa,IAAD,EACT2B,mBAAS,CAAEpB,KAAM,GAAIqB,SAAS,IADrB,mBAC7BC,EAD6B,KACtBC,EADsB,KAerC,OAZAC,qBACC,WACChC,EAAQC,GAAUgC,MAAK,SAAAxB,GACtBsB,EACC,CAAEvB,KAAMC,EACNoB,SAAS,SAId,CAAE5B,IAGI6B,EDT2BI,CAAWjC,GAA/Bc,EADmB,EACzBP,KAAcqB,EADW,EACXA,QAEtB,OACC,iCACC,wBAAIH,UACJ,iDAGEzB,GAGD4B,GACA,uBAAGH,UACH,+EADA,cASD,6BAASA,UAAU,cACjBX,EAAOoB,KAAI,SAAAC,GAAK,OAChB,kBAAC,WAAD,CAAUC,SAAW,kBAAC,EAAD,MAAaC,IAAKF,EAAMxB,IAC5C,kBAACW,EAAgBa,U,gBEaRG,MA5Cf,YAKI,IAJHC,EAIE,EAJFA,cACAC,EAGE,EAHFA,sBACAC,EAEE,EAFFA,aACAC,EACE,EADFA,mBACE,EACoCf,mBAAS,IAD7C,mBACMgB,EADN,KACkBC,EADlB,KAyBF,OACC,0BAAMC,SArBc,SAAAC,GACpBA,EAAEC,iBAEF,IAAMC,EAAoBL,EAAWM,OAEjCD,GAAqBA,EAAkBE,OAAS,IACnDV,GAAsB,SAAAW,GAAM,sBACxBA,EADwB,eAE1BH,EAAoBA,OAGlBN,EAAmBU,eAAeJ,GACrCP,GAAa,GAEbF,GAAc,SAAAc,GAAG,OAAML,GAAN,mBAA4BK,OAE9CT,EAAc,MAKenB,UAAU,QACxC,2BAAO6B,QAAS,YAAhB,YACC,2BACCC,KAAK,OACL5C,GAAI,WACJ6C,MAAOb,EACPc,YAAY,gCACZC,SA9BsB,SAAAZ,GAAC,OAAIF,EAAcE,EAAEa,OAAOH,YC4BvCI,EAlCM,WACpB,IAD0B,EAEYjC,mBADjB,CAAE,gBADG,mBAElBkC,EAFkB,KAENtB,EAFM,OAG4BZ,mBAAS,IAHrC,mBAGlBe,EAHkB,KAGEF,EAHF,OAIUb,oBAAS,GAJnB,mBAIlBmC,EAJkB,KAIPrB,EAJO,KAM1B,OAAIqB,EAEF,6BACC,gFACA,4BAAQC,QAAS,kBAAMtB,GAAa,KAApC,WAMF,iCACC,wBAAIhB,UAAU,aAAd,gBAEA,kBAAC,EAAD,CACCc,cAAeA,EACfC,sBAAuBA,EACvBC,aAAcA,EACdC,mBAAoBA,IAErB,6BAECmB,EAAW3B,KAAI,SAAAlC,GACf,OAAO,kBAAC,EAAD,CAASA,SAAUA,EAAUqC,IAAKrC,S,OC1B7CgE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.cb5cdd84.chunk.js","sourcesContent":["import sortBy from 'lodash/sortBy';\nexport const getGifs = async category => {\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${category ||\n\t\t'burgers'}&limit=20&api_key=${process.env.REACT_APP_GHIPY_KEY}`;\n\tconst resp = await fetch(url);\n\tconst { data } = await resp.json();\n\n\tconst imgs = data.reduce(\n\t\t(acc, {\n\t\t\t\tid,\n\t\t\t\ttitle,\n\t\t\t\turl,\n\t\t\t\timages: { fixed_height },\n\t\t\t   }) => {\n\t\t\treturn [\n\t\t\t\t...acc,\n\t\t\t\t{\n\t\t\t\t\tid,\n\t\t\t\t\ttitle,\n\t\t\t\t\tlink: url,\n\t\t\t\t\tgif: fixed_height.webp,\n\t\t\t\t\twebp_size: Number(fixed_height.webp_size),\n\t\t\t\t},\n\t\t\t];\n\t\t},\n\t\t[],\n\t);\n\t\n\tconst sortImgs = sortBy(imgs, 'webp_size');\n\n\treturn sortImgs;\n};\n","import React, { lazy, Suspense } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useGetGifs } from 'hooks/useGetGifs';\n\nconst GifGridItem = lazy(() => import('./GifGridItem'));\n\nconst Loader = () => <div className=\"loading\">Loading...</div>;\n\nconst GifGrid = ({ category }) => {\n\tconst { data: images, loading } = useGetGifs(category);\n\n\treturn (\n\t\t<section>\n\t\t\t<h3 className=\n\t\t\t\"title animate__animated\n\t\t\t animate__slideInRight\"\n\t\t\t >\n\t\t\t\t{category}\n\t\t\t</h3>\n\n\t\t\t{loading && (\n\t\t\t\t<p className=\n\t\t\t\t\"loading animate__animated\n\t\t\t\tanimate__fadeIn animate__repeat-3\n\t\t\t\tanimate__faster\"\n\t\t\t\t>\n\t\t\t\t\tloading...\n\t\t\t\t</p>\n\t\t\t)}\n\n\t\t\t<section className=\"image-grid\">\n\t\t\t\t{images.map(image => (\n\t\t\t\t\t<Suspense fallback={ <Loader /> } key={image.id}>\n\t\t\t\t\t\t<GifGridItem {...image} />\n\t\t\t\t\t</Suspense>\n\t\t\t\t))}\n\t\t\t</section>\n\t\t</section>\n\t);\n};\n\nexport default GifGrid;\n\nGifGrid.propTypes = {\n\tcategory: PropTypes.string,\n};\n","import { useState, useEffect } from 'react';\n\nimport { getGifs } from 'utils/getGifs';\n\nexport const useGetGifs = category => {\n\tconst [ state, setState ] = useState({ data: [], loading: true });\n\n\tuseEffect(\n\t\t() => {\n\t\t\tgetGifs(category).then(imgs => {\n\t\t\t\tsetState(\n\t\t\t\t\t{ data: imgs,\n\t\t\t\t\t  loading: false \n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t[ category ],\n\t);\n\n\treturn state;\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AddCategory({\n\tsetCategories,\n\tsetCategoryDictionary,\n\tsetSameValue,\n\tcategoryDictionary,\n}) {\n\tconst [ inputValue, setInputValue ] = useState('');\n\n\tconst handleInputValue = e => setInputValue(e.target.value);\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\n\t\tconst trimmedInputValue = inputValue.trim();\n\n\t\tif (trimmedInputValue && trimmedInputValue.length > 1) {\n\t\t\tsetCategoryDictionary(catDic => ({\n\t\t\t\t...catDic,\n\t\t\t\t[trimmedInputValue]: trimmedInputValue,\n\t\t\t}));\n\n\t\t\tif (categoryDictionary.hasOwnProperty(trimmedInputValue)) {\n\t\t\t\tsetSameValue(true);\n\t\t\t} else {\n\t\t\t\tsetCategories(cat => [ trimmedInputValue, ...cat ]);\n\t\t\t}\n\t\t\tsetInputValue('');\n\t\t}\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit} className=\"form\">\n\t\t<label htmlFor={\"category\"}>Category</label>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tid={\"category\"}\n\t\t\t\tvalue={inputValue}\n\t\t\t\tplaceholder=\"write a favorite gif category\"\n\t\t\t\tonChange={handleInputValue}\n\t\t\t/>\n\t\t</form>\n\t);\n}\n\nexport default AddCategory;\n\nAddCategory.propTypes = {\n\tsetCategories: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\n\nimport GifGrid from 'components/GifGrid';\nimport AddCategory from 'components/AddCategory';\n\nconst GifExpertApp = () => {\n\tconst initialState = [ 'Dragon ball' ];\n\tconst [ categories, setCategories ] = useState(initialState);\n\tconst [ categoryDictionary, setCategoryDictionary ] = useState({});\n\tconst [ sameValue, setSameValue ] = useState(false);\n\n\tif (sameValue) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>You wrote it again, please write other category </h1>\n\t\t\t\t<button onClick={() => setSameValue(false)}>return</button>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<section>\n\t\t\t<h2 className=\"gif-title\">Gif Searcher</h2>\n\n\t\t\t<AddCategory\n\t\t\t\tsetCategories={setCategories}\n\t\t\t\tsetCategoryDictionary={setCategoryDictionary}\n\t\t\t\tsetSameValue={setSameValue}\n\t\t\t\tcategoryDictionary={categoryDictionary}\n\t\t\t/>\n\t\t\t<hr />\n\n\t\t\t{categories.map(category => {\n\t\t\t\treturn <GifGrid category={category} key={category} />;\n\t\t\t})}\n\t\t</section>\n\t);\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}